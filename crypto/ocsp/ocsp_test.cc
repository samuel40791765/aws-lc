// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

#include <gtest/gtest.h>

#include "openssl/ocsp.h"
#include "openssl/pem.h"

#include "../internal.h"

/*
 * Test data below are taken from s2n's ocsp test files:
 * https://github.com/aws/s2n-tls/blob/main/tests/pems/ocsp
 */
static const char ca_cert[] = R"(
-----BEGIN CERTIFICATE-----
MIIFODCCAyCgAwIBAgIJAIbNvSGMRNd3MA0GCSqGSIb3DQEBCwUAMCgxCzAJBgNV
BAYTAlVTMQswCQYDVQQIDAJXQTEMMAoGA1UECgwDczJuMCAXDTE3MDkwNTA1MTUw
NVoYDzIxMTcwODEyMDUxNTA1WjAoMQswCQYDVQQGEwJVUzELMAkGA1UECAwCV0Ex
DDAKBgNVBAoMA3MybjCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAL44
CoKiyb2g53V0t6j6TQPoaHWHDpT/o4rew8CNNDi+NrIBFtF5pPbtpBk8CBVtYkDw
j6NJAdMDE8UsF67mSacyNmrDGGzaZFRsTAQU/eKfTiXJ5Y3mgmLBHtlnXJvd9IsZ
dsPTIxt2ru4msJgC/kenBtOlaZE5Ux/W+vmNTEFDPfYz5sqh69oOdznMNHi9lnJ1
C7HzhUDjcUy0D2iha3QHCXQfoMusgPOiewgEnT48j6hDKqXsRorFME19m4vGua+y
fROZpl0qS1Uh7m62X59VLqGXK/Cs6PfSQG18hLzpMYvSMR/rI3bjdNmzwbOj7GEE
4s6bAE34LSLo64imVukS6ha7LeJwh8vDD22P2aD4rDGiAN/mhXVC8qRr8wyXrIr2
hUpp42iJVyzVHWDRkq4dU31xbNsj/89FEh+XOYiuM7ZgeHV/Ie89nr78vOfv0iCM
gCFsykpFZ+8vDC22m6pGrl58VdY59d6jHtpNtQYWn1B5wxBx0ugPHd0uRyBvk8zr
If9A60QsQ56F3imJC6dR+4R8M8t84Wm6sDQAVvjyYoy9u4e4rLXT5IMFHGjI7Vda
hA0BmIBzBLfOb6ZUX2na0ckGvVu8DCrm9lJP1NYpHuQ3W2Hws1+rMD0URJqZy/D2
bttPxVgT/5KqCSpmBjvsv2unTfxVbZInQQFtt70lAgMBAAGjYzBhMB0GA1UdDgQW
BBQS34F1ccqS084bLCt3O54zd/P3bzAfBgNVHSMEGDAWgBQS34F1ccqS084bLCt3
O54zd/P3bzAPBgNVHRMBAf8EBTADAQH/MA4GA1UdDwEB/wQEAwIBhjANBgkqhkiG
9w0BAQsFAAOCAgEAs2C1eSchstZ7wUaOfJ4/4T2bzZ+aPpb9qR9rU+no8QpqW0TO
P5JROba0mpD3oRrS8hEihp2UPpHII1JRqzytq5GHM6rW9sowxJqhhp46LxtAqIeL
1k2PB53E9UIav4kf4C1eO32iO00ndK/fuWxku/95kIC7o5pQajCksEkeEoKx6oUp
6Rt2KAGrEImpoEP4qqw3GN8GrntC0s+FfZYsrj/KTJcQQBg18g7UY6rj0db1OxbK
K7USvQzPWh7c1mQPIFYfTnvn3KA14rUuWSW5NF9Eb6rwuczCWhzydvz94zeWMYrH
uDwJLbtLBv6f6CPPmladG8BpGKBb3p9l8FzfvUVtAtpBFcPZ40HemNO50kU27blN
mpvLCs6HcJ0/mgz+bVNDkkXyB1PSHbVqaWFJ4Sp/mo4liNgQBGgDfokC/4+hk30E
Mn8wWjILbmdnqiUSXEwroEi1qNVv/PJ97ZBOpQx01dcftuCxBIrQSAp3bsbguOoi
C/tAoGPsYpxHHffmHFD+2WZDrBYKwzl4S7j4/NRt57DdLZ8tdmLQoWyFPjmPyRJL
FhIqLSrlmZgT2/FNOOYRgZ+Z4uaoEZVdZ9YLj6R+wW4NBi5K+sd1/R+R7Es9iQFq
SYKXaJNh0sbvVOofX6/TqBapmcbVu3NbRnU6Csc2YgdY4WdN0G0ADWC0i8A=
-----END CERTIFICATE-----
)";

static const char server_cert[] = R"(
-----BEGIN CERTIFICATE-----
MIIE2zCCAsOgAwIBAgICd3gwDQYJKoZIhvcNAQELBQAwKDELMAkGA1UEBhMCVVMx
CzAJBgNVBAgMAldBMQwwCgYDVQQKDANzMm4wIBcNMTcwOTA1MDUzOTI1WhgPMjEx
NzA4MTIwNTM5MjVaMEAxCzAJBgNVBAYTAlVTMQswCQYDVQQIDAJXQTEMMAoGA1UE
CgwDczJuMRYwFAYDVQQDDA1zMm4gVGVzdCBDZXJ0MIIBIjANBgkqhkiG9w0BAQEF
AAOCAQ8AMIIBCgKCAQEAsdNiIHYethm112F5avA/cm2F34+Lv6/fnV5evNGqaV9e
v35B0Bvi+0vMTax2RUj4KKAMXcznz+EzSKjaN5PezsZWe0JsM99swAYFNo3ckIly
TYMu1kKfXY+7Yg2Tu1VaAbo7/KzGDEJtEDyQTDf/H97M2TMqqi+3yS2jK4dljjSN
3Spcgsoe29rTaWI4TCBZhqvKvspMSX+2V5o386AlLawlIv/YGehmv8zTBHqEEOr9
2B+AI+bmGiNT8aWNmAR0ogpUomttERwvcP/donY66tYvElqgObsTsRM09pYetej3
ZYO7AsokT3m9LXTjS7hIOmUAtbwkSDpXrn6RpHG3KQIDAQABo4H0MIHxMAkGA1Ud
EwQCMAAwEQYJYIZIAYb4QgEBBAQDAgZAMB0GA1UdDgQWBBQGLa0yYrqtRsHXNHv4
/nSkq8GsVDBYBgNVHSMEUTBPgBQS34F1ccqS084bLCt3O54zd/P3b6EspCowKDEL
MAkGA1UEBhMCVVMxCzAJBgNVBAgMAldBMQwwCgYDVQQKDANzMm6CCQCGzb0hjETX
dzAOBgNVHQ8BAf8EBAMCBaAwEwYDVR0lBAwwCgYIKwYBBQUHAwEwMwYIKwYBBQUH
AQEEJzAlMCMGCCsGAQUFBzABhhdodHRwOi8vb2NzcC5zMm50ZXN0LmNvbTANBgkq
hkiG9w0BAQsFAAOCAgEAk96vwb03XGRVsAgnaUS/xFmYt7C8mX2Ox1smokVr8e3R
xYBQw8iUUJa+jchYOKnwpbpaJXQVzppxAm2X837dm7HvvVWhaGD7u7ZblCJ02fnq
0Ry7CGNiiA3o+Bc7yZHLbbf7Vbgro4k0uoEoBHXUCkoRaPHOSzrB3qg6r2f9fPlt
b617wBp+4gVmKe4R/it2rODsJ5Oev1nYec9qf/O3N1mmlQXCBVkjTnMQbpv/0uAh
yS9crG93U0UkQE88v4L3je4YGpv7yJnkOCFn7TnwxrkWKR4FUZJw7LM5+DKTk6wQ
ZqYpxfIxnOS/MRP+P+C0V2dKE51iXqPuCB5ocOdCEhGg4hqlzLtQyR5Ml4uWDMP9
bN/CXTw+boffvlO34PnuRtNQ2GxkHOVqCvu0eiA74Da1jOoYteB3WHU4BZgxi918
mT20kScJuwvPwhodbz2TFRqAY6azJABb8MXvh4ScXt/kpN+vMWSFs3UeBcIwBLY2
7C0IxOpDbmfLpiDxQvY1AsVoHdwrcMiObVxW1Xgo3g6n+gOcZ3oOVv7nS50/N1Ds
LMj6FcIAPjNOJLnekUyfke27AckGMgWiAHgSIWl2C4bezWSFNCit6SIIEZ+VtEL3
KQyrfL8ymVro7xCn+piJ/kTCSLg3/6XNpJcFiHqrbtvDst44vXyjLKw9B0IKFcc=
-----END CERTIFICATE-----
)";

static const uint8_t ocsp_response_der[] = {
    0x30, 0x82, 0x08, 0xb3, 0x0a, 0x01, 0x00, 0xa0, 0x82, 0x08, 0xac, 0x30,
    0x82, 0x08, 0xa8, 0x06, 0x09, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x30,
    0x01, 0x01, 0x04, 0x82, 0x08, 0x99, 0x30, 0x82, 0x08, 0x95, 0x30, 0x81,
    0xfc, 0xa1, 0x5d, 0x30, 0x5b, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55,
    0x04, 0x06, 0x13, 0x02, 0x55, 0x53, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03,
    0x55, 0x04, 0x08, 0x0c, 0x02, 0x57, 0x41, 0x31, 0x0c, 0x30, 0x0a, 0x06,
    0x03, 0x55, 0x04, 0x0a, 0x0c, 0x03, 0x73, 0x32, 0x6e, 0x31, 0x16, 0x30,
    0x14, 0x06, 0x03, 0x55, 0x04, 0x0b, 0x0c, 0x0d, 0x73, 0x32, 0x6e, 0x20,
    0x54, 0x65, 0x73, 0x74, 0x20, 0x4f, 0x43, 0x53, 0x50, 0x31, 0x19, 0x30,
    0x17, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x10, 0x6f, 0x63, 0x73, 0x70,
    0x2e, 0x73, 0x32, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x6d,
    0x18, 0x0f, 0x32, 0x30, 0x31, 0x37, 0x31, 0x30, 0x32, 0x37, 0x30, 0x31,
    0x33, 0x30, 0x32, 0x36, 0x5a, 0x30, 0x65, 0x30, 0x63, 0x30, 0x3b, 0x30,
    0x09, 0x06, 0x05, 0x2b, 0x0e, 0x03, 0x02, 0x1a, 0x05, 0x00, 0x04, 0x14,
    0xde, 0x79, 0x32, 0xb3, 0x21, 0x7e, 0x48, 0xfb, 0x4e, 0x47, 0xae, 0x0b,
    0x90, 0x07, 0xa5, 0x53, 0x76, 0xae, 0x44, 0xca, 0x04, 0x14, 0x12, 0xdf,
    0x81, 0x75, 0x71, 0xca, 0x92, 0xd3, 0xce, 0x1b, 0x2c, 0x2b, 0x77, 0x3b,
    0x9e, 0x33, 0x77, 0xf3, 0xf7, 0x6f, 0x02, 0x02, 0x77, 0x78, 0x80, 0x00,
    0x18, 0x0f, 0x32, 0x30, 0x31, 0x37, 0x31, 0x30, 0x32, 0x37, 0x30, 0x31,
    0x33, 0x30, 0x32, 0x36, 0x5a, 0xa0, 0x11, 0x18, 0x0f, 0x32, 0x31, 0x31,
    0x37, 0x31, 0x30, 0x30, 0x33, 0x30, 0x31, 0x33, 0x30, 0x32, 0x36, 0x5a,
    0xa1, 0x23, 0x30, 0x21, 0x30, 0x1f, 0x06, 0x09, 0x2b, 0x06, 0x01, 0x05,
    0x05, 0x07, 0x30, 0x01, 0x02, 0x04, 0x12, 0x04, 0x10, 0xb1, 0xa8, 0x3b,
    0x1c, 0xbf, 0xfe, 0x38, 0x6d, 0x0a, 0x71, 0xa5, 0x40, 0x24, 0x22, 0x9b,
    0x5b, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01,
    0x01, 0x0b, 0x05, 0x00, 0x03, 0x82, 0x02, 0x01, 0x00, 0x1a, 0x96, 0x80,
    0xc5, 0xe2, 0x12, 0x3f, 0x5b, 0x24, 0xaa, 0x27, 0x10, 0xf1, 0x61, 0x81,
    0x7a, 0x0a, 0x10, 0x9c, 0xa0, 0x91, 0x48, 0x13, 0xb7, 0x6b, 0x38, 0x44,
    0x40, 0x5f, 0x20, 0xff, 0x0a, 0xf0, 0xac, 0xe9, 0xbf, 0xfc, 0x33, 0x4b,
    0xf2, 0x54, 0xd8, 0x86, 0xe4, 0x59, 0x8b, 0x4b, 0xba, 0x69, 0x0c, 0xb7,
    0x75, 0x2d, 0xb1, 0x5f, 0xf5, 0xdf, 0x7d, 0x8c, 0x17, 0x46, 0xbb, 0xe5,
    0xda, 0x13, 0xba, 0x92, 0xf4, 0x16, 0x84, 0x6e, 0xce, 0xbc, 0x24, 0xde,
    0x84, 0x3d, 0x46, 0xdc, 0xa9, 0x4d, 0x46, 0x43, 0xc9, 0x9f, 0x25, 0xb0,
    0x47, 0xe5, 0x6d, 0x9d, 0x66, 0xf6, 0x36, 0x19, 0xba, 0xa2, 0xb8, 0xca,
    0xd5, 0x45, 0x3c, 0x72, 0x62, 0xe3, 0xa1, 0xff, 0xf2, 0xf3, 0x0d, 0x27,
    0xe0, 0x4f, 0x7d, 0x4e, 0x98, 0xd6, 0xf5, 0x7a, 0xb5, 0x54, 0xf7, 0x4d,
    0xeb, 0x25, 0x9e, 0xc7, 0xc8, 0xf6, 0x5a, 0x9a, 0x27, 0xe7, 0x52, 0x9b,
    0x73, 0xda, 0xad, 0xd8, 0x1b, 0x11, 0x3a, 0x49, 0xaa, 0x16, 0x56, 0xb6,
    0x73, 0x2d, 0xa6, 0xe3, 0x96, 0xf8, 0xf9, 0x13, 0x4d, 0xda, 0x49, 0x21,
    0x77, 0x6f, 0x56, 0xdf, 0x2d, 0x83, 0xcd, 0xd4, 0xd4, 0x94, 0x6b, 0xb6,
    0x39, 0xef, 0xc2, 0x47, 0x28, 0x4b, 0x1e, 0xa3, 0x60, 0xdd, 0x1b, 0x70,
    0xdb, 0x67, 0x44, 0x09, 0x3a, 0x84, 0xa5, 0xb1, 0xff, 0x1a, 0xef, 0x1c,
    0x33, 0xe0, 0x71, 0x30, 0xd6, 0xcc, 0x26, 0x4d, 0x1d, 0x06, 0x89, 0x74,
    0xf5, 0x85, 0x2c, 0x89, 0xa5, 0xc5, 0xaa, 0xc6, 0xfa, 0x9b, 0x4b, 0x5d,
    0xdb, 0x1b, 0x17, 0xd0, 0xc4, 0xfc, 0x9d, 0x3a, 0x1c, 0x71, 0x94, 0x1e,
    0x90, 0xff, 0x0e, 0xad, 0x7d, 0x8d, 0x95, 0xab, 0x01, 0xc1, 0x3b, 0x2a,
    0xba, 0xfa, 0xfd, 0xae, 0x75, 0xe1, 0x57, 0xd1, 0x4f, 0x80, 0xf3, 0xa3,
    0xfb, 0x70, 0x84, 0x36, 0x35, 0xee, 0x06, 0xbb, 0xb1, 0x66, 0x49, 0x15,
    0xb5, 0x02, 0x80, 0x34, 0x41, 0xc9, 0x61, 0x06, 0x36, 0x8e, 0xa8, 0x96,
    0x7c, 0x44, 0x32, 0x2d, 0x7b, 0x69, 0x0e, 0xe3, 0x1f, 0x83, 0x6b, 0xf2,
    0xa0, 0x45, 0xb5, 0x24, 0x5f, 0x02, 0x89, 0x16, 0x68, 0xfb, 0xbe, 0xb6,
    0xdf, 0x7e, 0xf2, 0x30, 0x0b, 0x07, 0xc2, 0x7b, 0x79, 0x96, 0x74, 0x38,
    0xf3, 0x2e, 0xbe, 0xbb, 0x8b, 0xb7, 0x4e, 0x96, 0xa4, 0xe5, 0xc5, 0x80,
    0x88, 0xca, 0x09, 0xca, 0x8e, 0x3e, 0x15, 0xb9, 0x7c, 0x23, 0xa6, 0x68,
    0xde, 0x3f, 0x65, 0xd1, 0x46, 0x0c, 0x5e, 0x42, 0xb0, 0xa0, 0x8e, 0xf5,
    0xe3, 0x27, 0x52, 0xd1, 0x0a, 0xe7, 0x53, 0xbf, 0xd8, 0x95, 0x32, 0x67,
    0xc6, 0xc9, 0x6e, 0x11, 0x46, 0x08, 0x8b, 0xa1, 0xe2, 0x85, 0x4b, 0x7c,
    0x2f, 0x91, 0xbf, 0xe4, 0x9f, 0x1e, 0x2f, 0x8f, 0x23, 0x29, 0x4a, 0x7e,
    0x5e, 0x8f, 0xdb, 0x76, 0x16, 0x88, 0xd2, 0x50, 0xb9, 0x19, 0x6c, 0xce,
    0xb0, 0xdb, 0x98, 0x0e, 0xf5, 0xf2, 0xff, 0x21, 0xab, 0x37, 0x66, 0x63,
    0x88, 0xe5, 0x33, 0x1b, 0x49, 0x95, 0x94, 0x03, 0xea, 0xf4, 0x97, 0x88,
    0xa6, 0x3d, 0x32, 0x77, 0x90, 0x0d, 0x63, 0x49, 0x06, 0x23, 0xfc, 0xdd,
    0x9d, 0x1b, 0x21, 0x99, 0x0f, 0x20, 0xed, 0x38, 0x79, 0x2f, 0x77, 0x48,
    0x20, 0x36, 0x61, 0x95, 0xde, 0xee, 0x6c, 0x68, 0x80, 0x52, 0xa4, 0xc3,
    0xa0, 0x36, 0x39, 0x9e, 0x10, 0xb1, 0x92, 0xa1, 0x47, 0x44, 0xd6, 0x5f,
    0x99, 0x20, 0xfc, 0x0b, 0xe6, 0xd0, 0x8a, 0x81, 0x5c, 0x50, 0xfd, 0x2a,
    0xc0, 0x78, 0x75, 0x10, 0x4d, 0x56, 0x1a, 0x4c, 0x89, 0x7a, 0x03, 0x23,
    0xd3, 0x12, 0x22, 0x50, 0xc0, 0x4a, 0xa3, 0xd5, 0x98, 0x5c, 0x3a, 0xe6,
    0x16, 0xde, 0xda, 0x90, 0xe2, 0xa0, 0x82, 0x05, 0x7e, 0x30, 0x82, 0x05,
    0x7a, 0x30, 0x82, 0x05, 0x76, 0x30, 0x82, 0x03, 0x5e, 0xa0, 0x03, 0x02,
    0x01, 0x02, 0x02, 0x02, 0x77, 0x79, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86,
    0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00, 0x30, 0x28, 0x31,
    0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x55, 0x53,
    0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x08, 0x0c, 0x02, 0x57,
    0x41, 0x31, 0x0c, 0x30, 0x0a, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x0c, 0x03,
    0x73, 0x32, 0x6e, 0x30, 0x20, 0x17, 0x0d, 0x31, 0x37, 0x30, 0x39, 0x30,
    0x35, 0x30, 0x35, 0x34, 0x33, 0x32, 0x32, 0x5a, 0x18, 0x0f, 0x32, 0x31,
    0x31, 0x37, 0x30, 0x38, 0x31, 0x32, 0x30, 0x35, 0x34, 0x33, 0x32, 0x32,
    0x5a, 0x30, 0x5b, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06,
    0x13, 0x02, 0x55, 0x53, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04,
    0x08, 0x0c, 0x02, 0x57, 0x41, 0x31, 0x0c, 0x30, 0x0a, 0x06, 0x03, 0x55,
    0x04, 0x0a, 0x0c, 0x03, 0x73, 0x32, 0x6e, 0x31, 0x16, 0x30, 0x14, 0x06,
    0x03, 0x55, 0x04, 0x0b, 0x0c, 0x0d, 0x73, 0x32, 0x6e, 0x20, 0x54, 0x65,
    0x73, 0x74, 0x20, 0x4f, 0x43, 0x53, 0x50, 0x31, 0x19, 0x30, 0x17, 0x06,
    0x03, 0x55, 0x04, 0x03, 0x0c, 0x10, 0x6f, 0x63, 0x73, 0x70, 0x2e, 0x73,
    0x32, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x30, 0x82,
    0x02, 0x22, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d,
    0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x82, 0x02, 0x0f, 0x00, 0x30, 0x82,
    0x02, 0x0a, 0x02, 0x82, 0x02, 0x01, 0x00, 0xaf, 0x41, 0x47, 0xed, 0x6a,
    0x7e, 0xb1, 0x31, 0x0d, 0xe6, 0x4c, 0xd8, 0x44, 0x75, 0xc5, 0x2e, 0x4f,
    0xaa, 0xaf, 0x84, 0x4e, 0xc5, 0xe0, 0xf3, 0x74, 0xd0, 0x6f, 0x02, 0x87,
    0xca, 0x51, 0x68, 0x18, 0x83, 0xdd, 0x4b, 0x7c, 0x8b, 0x31, 0xe8, 0x2d,
    0x39, 0x09, 0x88, 0x0d, 0xa5, 0xbc, 0x79, 0x67, 0x77, 0x08, 0x0f, 0x8b,
    0xc8, 0xa5, 0x8b, 0x6a, 0x7b, 0x68, 0xda, 0x05, 0x53, 0xbc, 0x35, 0x8f,
    0xbb, 0x7f, 0x01, 0x26, 0xb9, 0x98, 0xe6, 0x7b, 0x5c, 0x2a, 0xe3, 0x1b,
    0x53, 0x93, 0xb3, 0xfd, 0x2a, 0x2e, 0x38, 0xbc, 0x8f, 0xfc, 0xb1, 0x09,
    0x93, 0x95, 0xec, 0xf2, 0x96, 0xbc, 0x44, 0x3c, 0x43, 0x45, 0xa5, 0xf5,
    0xd5, 0x6c, 0x4b, 0xa9, 0xb2, 0x0c, 0xb6, 0xb8, 0x72, 0x56, 0x95, 0xad,
    0xbc, 0x67, 0x39, 0x26, 0x86, 0x61, 0x13, 0x02, 0xf3, 0xcb, 0xe1, 0xca,
    0x3b, 0x80, 0x24, 0xc9, 0x40, 0xbb, 0xbb, 0xb5, 0xd9, 0x75, 0x37, 0x2f,
    0x68, 0x6a, 0x4a, 0x31, 0x02, 0xb8, 0xa7, 0x1a, 0xb5, 0x65, 0x2c, 0x71,
    0x11, 0x46, 0xc5, 0x5a, 0xb5, 0x6f, 0x3d, 0x68, 0x20, 0xe5, 0xf2, 0x21,
    0x5b, 0xf5, 0x5d, 0x64, 0xf0, 0x36, 0x9c, 0x8f, 0x8c, 0x1f, 0xde, 0x02,
    0x1a, 0x30, 0xe2, 0x25, 0xee, 0x17, 0xc1, 0xfe, 0x5d, 0xd4, 0x96, 0xf5,
    0x33, 0xf9, 0x22, 0xff, 0xfb, 0x4a, 0xe9, 0xeb, 0x5b, 0x72, 0xb9, 0x9d,
    0x65, 0xfd, 0x99, 0xaa, 0x3a, 0xd5, 0x02, 0x65, 0xa5, 0x28, 0x5f, 0xc3,
    0x8e, 0x91, 0x13, 0xbc, 0xd4, 0xa5, 0xce, 0x2c, 0x1c, 0xb9, 0xee, 0x96,
    0x7f, 0xf5, 0xa4, 0xd4, 0xdd, 0xe0, 0x20, 0xd9, 0x24, 0x07, 0x54, 0xdf,
    0x81, 0xe5, 0x2b, 0xfa, 0x45, 0xeb, 0x3c, 0x80, 0x07, 0x5d, 0x0f, 0xfc,
    0xd6, 0xec, 0x4d, 0x18, 0x51, 0x68, 0x4f, 0x68, 0x98, 0x2f, 0x45, 0x41,
    0x93, 0x47, 0x4f, 0xdb, 0xfa, 0x39, 0xec, 0x8a, 0x41, 0xb7, 0x0e, 0xcc,
    0x6b, 0xe9, 0x64, 0xc2, 0x65, 0x60, 0x6b, 0x69, 0xb9, 0x96, 0x40, 0xee,
    0xd2, 0xb4, 0x27, 0x87, 0x5b, 0x72, 0xb7, 0xf0, 0x0f, 0x7b, 0x03, 0xb3,
    0x51, 0xbe, 0xb5, 0xae, 0x9b, 0xfd, 0xe0, 0xdc, 0x08, 0xf1, 0x44, 0xa0,
    0xaa, 0x7a, 0xd7, 0xe8, 0x66, 0xb3, 0x2a, 0x3b, 0x16, 0xc8, 0x51, 0xda,
    0x2c, 0xcd, 0x27, 0x8b, 0xf9, 0x5e, 0x88, 0x46, 0xce, 0x66, 0xd2, 0x2d,
    0xd7, 0x2b, 0x44, 0x13, 0xcd, 0xd2, 0xa7, 0xe9, 0x99, 0x3c, 0x42, 0x46,
    0xfd, 0x15, 0x00, 0x7d, 0x05, 0x04, 0x77, 0x2a, 0x89, 0xb5, 0xe3, 0x83,
    0x26, 0x1e, 0xc7, 0x91, 0x73, 0xa7, 0x02, 0x6c, 0x62, 0x59, 0x05, 0x5c,
    0x1f, 0xde, 0x47, 0x2a, 0x4c, 0xb5, 0x60, 0x86, 0xf2, 0x4d, 0x10, 0xfa,
    0x9d, 0x58, 0x06, 0x8e, 0x68, 0x94, 0x0a, 0x57, 0xb9, 0x6a, 0x51, 0x0f,
    0x9a, 0x4b, 0xb2, 0x4d, 0xf1, 0x23, 0x23, 0xd2, 0x09, 0xaa, 0x5a, 0xa4,
    0xe8, 0x97, 0xd4, 0x31, 0xa3, 0xc6, 0x97, 0x90, 0xe2, 0x8c, 0x32, 0x0f,
    0x26, 0x5f, 0xbb, 0xb4, 0x19, 0x23, 0xd4, 0xb7, 0xa9, 0x77, 0xb5, 0xca,
    0xca, 0xbe, 0xdf, 0x47, 0xc5, 0x11, 0x1c, 0x8e, 0xf8, 0xdc, 0x5a, 0x47,
    0xe8, 0x1a, 0x36, 0xfe, 0xd8, 0x1b, 0xdd, 0x2e, 0x9e, 0x21, 0x8a, 0x61,
    0xfd, 0xa7, 0x1d, 0xea, 0xcb, 0xe5, 0x98, 0xb7, 0xf0, 0xa2, 0x69, 0xe8,
    0xfc, 0xf1, 0xa3, 0x74, 0xed, 0x9b, 0x09, 0x2e, 0x1b, 0x2f, 0x71, 0x9d,
    0xde, 0x1a, 0x59, 0x0a, 0x92, 0x12, 0x07, 0xf9, 0xc1, 0x3a, 0x53, 0x53,
    0xf2, 0x94, 0x5d, 0x7e, 0x5d, 0x56, 0x89, 0x71, 0x96, 0xdb, 0x1b, 0x23,
    0x4c, 0xea, 0xe6, 0x6a, 0x9e, 0xc5, 0xcf, 0x00, 0x99, 0x6e, 0x54, 0x73,
    0x27, 0xa3, 0x0b, 0x02, 0x03, 0x01, 0x00, 0x01, 0xa3, 0x75, 0x30, 0x73,
    0x30, 0x09, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x04, 0x02, 0x30, 0x00, 0x30,
    0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0x24, 0x27,
    0xf4, 0x6c, 0x82, 0x56, 0x02, 0x65, 0xea, 0xfa, 0x70, 0x9c, 0x75, 0xb9,
    0x1b, 0x6f, 0x45, 0xeb, 0x76, 0x38, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d,
    0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0x12, 0xdf, 0x81, 0x75, 0x71,
    0xca, 0x92, 0xd3, 0xce, 0x1b, 0x2c, 0x2b, 0x77, 0x3b, 0x9e, 0x33, 0x77,
    0xf3, 0xf7, 0x6f, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01,
    0xff, 0x04, 0x04, 0x03, 0x02, 0x07, 0x80, 0x30, 0x16, 0x06, 0x03, 0x55,
    0x1d, 0x25, 0x01, 0x01, 0xff, 0x04, 0x0c, 0x30, 0x0a, 0x06, 0x08, 0x2b,
    0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x09, 0x30, 0x0d, 0x06, 0x09, 0x2a,
    0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00, 0x03, 0x82,
    0x02, 0x01, 0x00, 0x8f, 0xbb, 0xc9, 0x53, 0x27, 0x88, 0x07, 0x3f, 0x27,
    0xd5, 0x04, 0x2b, 0xb6, 0xe5, 0x86, 0x35, 0x4d, 0x01, 0xbc, 0xfe, 0xdc,
    0x05, 0x69, 0x9d, 0xa0, 0xa6, 0x44, 0x80, 0x60, 0xf5, 0xc4, 0x09, 0xae,
    0xb2, 0xc8, 0xbb, 0x09, 0xc2, 0xeb, 0x0c, 0xe2, 0x16, 0xfb, 0xe4, 0xa4,
    0x63, 0x87, 0x97, 0x73, 0x92, 0xc2, 0xaa, 0x7d, 0xec, 0x4b, 0xe8, 0x93,
    0xe5, 0x9e, 0x4a, 0x8a, 0x7c, 0x28, 0xd9, 0x4e, 0xcc, 0x07, 0x63, 0xda,
    0x4d, 0xef, 0x75, 0xa8, 0x1e, 0x36, 0x55, 0x3b, 0xd9, 0xbd, 0x08, 0x3c,
    0x5c, 0x59, 0xcd, 0xc6, 0xe4, 0xb0, 0x25, 0x3f, 0x67, 0x62, 0xc0, 0x3e,
    0x03, 0x1f, 0x15, 0x73, 0x07, 0x30, 0x9f, 0x26, 0xa5, 0x3a, 0xcf, 0xb4,
    0xb3, 0x43, 0xbb, 0xaf, 0x0e, 0x65, 0x7d, 0x03, 0x76, 0x27, 0x9e, 0x47,
    0xe5, 0x81, 0x53, 0xd8, 0x78, 0x49, 0xcd, 0x64, 0xfe, 0xfa, 0x6f, 0x81,
    0x96, 0xd4, 0x79, 0xfc, 0x35, 0x74, 0x58, 0xd8, 0x7b, 0x1e, 0xcb, 0xf6,
    0xeb, 0x47, 0xda, 0xdb, 0x26, 0xa6, 0x99, 0x58, 0x3d, 0xcc, 0xa3, 0x37,
    0x41, 0xd8, 0xe4, 0xb8, 0x88, 0x4a, 0x55, 0xb5, 0x8e, 0xfc, 0x95, 0xed,
    0x78, 0xca, 0xcd, 0x29, 0x87, 0x0d, 0xdb, 0x09, 0x2f, 0x57, 0x7e, 0x41,
    0x94, 0x85, 0x8d, 0x13, 0xd7, 0xa2, 0x7b, 0xf8, 0xaa, 0x4f, 0x4f, 0xe4,
    0x0a, 0x52, 0x04, 0xc5, 0xeb, 0x65, 0x63, 0x04, 0x43, 0xee, 0xe2, 0x9a,
    0x6a, 0xf8, 0xaa, 0xb0, 0xc4, 0xc4, 0xd3, 0xf6, 0x4b, 0xbd, 0x70, 0xca,
    0x57, 0x89, 0xbd, 0x98, 0x8b, 0x9a, 0xb4, 0xb5, 0xdb, 0x94, 0x6d, 0x52,
    0xa0, 0x2a, 0x03, 0x19, 0x61, 0xee, 0xb8, 0x03, 0xe7, 0x79, 0x9d, 0xb7,
    0x52, 0xb7, 0x87, 0xc0, 0xc6, 0xc7, 0xec, 0xf8, 0x91, 0xc6, 0xc1, 0x87,
    0xf7, 0x6e, 0xb8, 0x13, 0xd5, 0x74, 0x3f, 0x48, 0xb1, 0xcd, 0x19, 0x75,
    0xcb, 0xb1, 0x34, 0x4a, 0x23, 0x07, 0xb3, 0x3e, 0xd1, 0x13, 0x74, 0x14,
    0x7a, 0xf3, 0x80, 0x15, 0x9e, 0x87, 0x2d, 0x41, 0xef, 0x77, 0x0e, 0x58,
    0x0c, 0xcf, 0xf8, 0xe3, 0x59, 0xce, 0xc3, 0xb6, 0xe4, 0x7b, 0x24, 0x47,
    0x9a, 0x1a, 0xb6, 0x8c, 0xd4, 0xa9, 0x7f, 0x5c, 0x35, 0x74, 0x78, 0xf0,
    0xa5, 0x70, 0xdc, 0x17, 0xe7, 0x4a, 0xec, 0x92, 0x54, 0x92, 0x64, 0xd8,
    0xbd, 0xf8, 0x32, 0x2a, 0x07, 0x32, 0x90, 0x44, 0xd1, 0xdc, 0x91, 0x1f,
    0x79, 0x68, 0xea, 0x88, 0x92, 0xc7, 0xb0, 0xc6, 0x1c, 0xed, 0x29, 0xc7,
    0x68, 0x7f, 0x06, 0x43, 0x33, 0x25, 0x05, 0xd1, 0xe5, 0x2a, 0xb4, 0xd9,
    0xfe, 0xc3, 0x01, 0x8d, 0x6a, 0x4e, 0x27, 0x49, 0xc4, 0x93, 0xe9, 0x0f,
    0x5a, 0xc0, 0x20, 0x55, 0xe8, 0xa2, 0xbc, 0x42, 0x53, 0x5d, 0x45, 0x33,
    0xb3, 0x08, 0xc6, 0xc6, 0x17, 0x2d, 0x5c, 0x19, 0x09, 0x13, 0xfd, 0x1f,
    0x24, 0xe9, 0x3d, 0x48, 0xff, 0x50, 0x81, 0x50, 0xcc, 0x80, 0x42, 0xf3,
    0x77, 0xb0, 0xff, 0xa9, 0xe7, 0x60, 0x70, 0x97, 0x5d, 0xb8, 0xcb, 0x78,
    0x15, 0x50, 0x3b, 0x8b, 0x0a, 0x9a, 0x9a, 0xb0, 0xbe, 0x61, 0x5f, 0x0e,
    0xfa, 0x1e, 0xd9, 0x10, 0x26, 0xb8, 0x03, 0xff, 0x50, 0x2b, 0x6c, 0x06,
    0x56, 0xaf, 0x5e, 0xa4, 0x74, 0x51, 0xac, 0x7a, 0x6f, 0x81, 0x63, 0xf2,
    0xd2, 0x74, 0xdd, 0x1f, 0x9d, 0x17, 0xc8, 0x90, 0x9e, 0xa4, 0x79, 0xc5,
    0x5f, 0xd7, 0x12, 0xb2, 0x39, 0x9c, 0x06, 0x35, 0x45, 0x9a, 0xae, 0xa4,
    0x14, 0x17, 0x67, 0xd7, 0x9f, 0xa2, 0x41, 0x86, 0x4d, 0xd4, 0x31, 0xd5,
    0x1a, 0xbe, 0x8e, 0x5c, 0xa9, 0x0d, 0xdc, 0x8a, 0x0a, 0xa9, 0x65, 0x4a,
    0xd5, 0x38, 0x22, 0xc8, 0x14, 0x5b, 0xb9, 0x5f, 0x50, 0x8b, 0x94 };

static const uint8_t ocsp_revoked_response_der[] = {
    0x30, 0x82, 0x08, 0xc5, 0x0a, 0x01, 0x00, 0xa0, 0x82, 0x08, 0xbe, 0x30,
    0x82, 0x08, 0xba, 0x06, 0x09, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x30,
    0x01, 0x01, 0x04, 0x82, 0x08, 0xab, 0x30, 0x82, 0x08, 0xa7, 0x30, 0x82,
    0x01, 0x0d, 0xa1, 0x5d, 0x30, 0x5b, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03,
    0x55, 0x04, 0x06, 0x13, 0x02, 0x55, 0x53, 0x31, 0x0b, 0x30, 0x09, 0x06,
    0x03, 0x55, 0x04, 0x08, 0x0c, 0x02, 0x57, 0x41, 0x31, 0x0c, 0x30, 0x0a,
    0x06, 0x03, 0x55, 0x04, 0x0a, 0x0c, 0x03, 0x73, 0x32, 0x6e, 0x31, 0x16,
    0x30, 0x14, 0x06, 0x03, 0x55, 0x04, 0x0b, 0x0c, 0x0d, 0x73, 0x32, 0x6e,
    0x20, 0x54, 0x65, 0x73, 0x74, 0x20, 0x4f, 0x43, 0x53, 0x50, 0x31, 0x19,
    0x30, 0x17, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x10, 0x6f, 0x63, 0x73,
    0x70, 0x2e, 0x73, 0x32, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x63, 0x6f,
    0x6d, 0x18, 0x0f, 0x32, 0x30, 0x32, 0x30, 0x30, 0x36, 0x32, 0x32, 0x32,
    0x31, 0x32, 0x32, 0x32, 0x35, 0x5a, 0x30, 0x76, 0x30, 0x74, 0x30, 0x3b,
    0x30, 0x09, 0x06, 0x05, 0x2b, 0x0e, 0x03, 0x02, 0x1a, 0x05, 0x00, 0x04,
    0x14, 0xde, 0x79, 0x32, 0xb3, 0x21, 0x7e, 0x48, 0xfb, 0x4e, 0x47, 0xae,
    0x0b, 0x90, 0x07, 0xa5, 0x53, 0x76, 0xae, 0x44, 0xca, 0x04, 0x14, 0x12,
    0xdf, 0x81, 0x75, 0x71, 0xca, 0x92, 0xd3, 0xce, 0x1b, 0x2c, 0x2b, 0x77,
    0x3b, 0x9e, 0x33, 0x77, 0xf3, 0xf7, 0x6f, 0x02, 0x02, 0x77, 0x78, 0xa1,
    0x11, 0x18, 0x0f, 0x32, 0x30, 0x31, 0x38, 0x30, 0x38, 0x31, 0x32, 0x30,
    0x35, 0x33, 0x39, 0x32, 0x35, 0x5a, 0x18, 0x0f, 0x32, 0x30, 0x32, 0x30,
    0x30, 0x36, 0x32, 0x32, 0x32, 0x31, 0x32, 0x32, 0x32, 0x35, 0x5a, 0xa0,
    0x11, 0x18, 0x0f, 0x32, 0x30, 0x38, 0x30, 0x30, 0x36, 0x30, 0x37, 0x32,
    0x31, 0x32, 0x32, 0x32, 0x35, 0x5a, 0xa1, 0x23, 0x30, 0x21, 0x30, 0x1f,
    0x06, 0x09, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x30, 0x01, 0x02, 0x04,
    0x12, 0x04, 0x10, 0xde, 0xe9, 0xe8, 0x06, 0xbf, 0x49, 0xe4, 0x44, 0x83,
    0x29, 0xc2, 0x04, 0x76, 0x89, 0x60, 0x9a, 0x30, 0x0d, 0x06, 0x09, 0x2a,
    0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x05, 0x05, 0x00, 0x03, 0x82,
    0x02, 0x01, 0x00, 0x9f, 0x99, 0x98, 0x1b, 0xde, 0xcf, 0x7b, 0x35, 0xa9,
    0x4d, 0x4b, 0x04, 0x32, 0xff, 0x96, 0xe9, 0x83, 0x29, 0x0f, 0xa3, 0x20,
    0xb0, 0x06, 0xf9, 0x56, 0x61, 0xae, 0x64, 0x2c, 0xa6, 0x09, 0x94, 0x05,
    0x53, 0x6b, 0xaa, 0x0d, 0x83, 0x61, 0x65, 0xae, 0x53, 0xd9, 0x2b, 0x08,
    0x86, 0x03, 0x9e, 0x41, 0x1c, 0x1b, 0x67, 0x6c, 0xed, 0x18, 0x0f, 0x15,
    0x0a, 0x74, 0x24, 0x99, 0x32, 0xe6, 0xa8, 0x69, 0x94, 0x8f, 0x02, 0x89,
    0xaa, 0x4f, 0x1e, 0x3c, 0x1d, 0xf0, 0x21, 0x05, 0x3b, 0xb9, 0x82, 0x80,
    0x35, 0xef, 0x42, 0x7f, 0x29, 0x7f, 0xc7, 0x5f, 0xb8, 0x22, 0xe2, 0x44,
    0xd6, 0xe6, 0x0c, 0x99, 0xf3, 0x88, 0x31, 0xff, 0x2a, 0xb8, 0x4b, 0x6d,
    0xaa, 0xd2, 0x72, 0xa4, 0x9e, 0x9d, 0xfe, 0xe5, 0xfd, 0x95, 0xb7, 0xde,
    0xbb, 0x79, 0xc9, 0xd0, 0xdb, 0x5c, 0x3a, 0xf8, 0xa5, 0xba, 0x29, 0xd8,
    0x8f, 0xf2, 0xdc, 0x55, 0xee, 0xd5, 0x2f, 0xab, 0x42, 0x87, 0xc4, 0x1e,
    0x7d, 0x0a, 0xd8, 0x21, 0xdc, 0xef, 0xe0, 0x27, 0x8a, 0xa5, 0x7a, 0x42,
    0x37, 0x79, 0x74, 0x39, 0x73, 0x91, 0x44, 0x20, 0xc1, 0xec, 0xde, 0xd2,
    0x3e, 0xcc, 0xb5, 0xc7, 0x18, 0x98, 0xfb, 0x2c, 0xcb, 0xaa, 0x01, 0xb9,
    0xd6, 0xd0, 0x8a, 0x4c, 0x8b, 0xcd, 0x99, 0x4d, 0xe2, 0x3e, 0x0a, 0xab,
    0x68, 0xcc, 0xfe, 0x0a, 0x36, 0x97, 0x51, 0x74, 0x35, 0xf4, 0x18, 0x44,
    0xb1, 0xc5, 0x41, 0xc3, 0xa9, 0x63, 0x2f, 0xd2, 0x44, 0xad, 0x8a, 0xb9,
    0x3e, 0x75, 0xfd, 0x5e, 0x59, 0x5c, 0x77, 0x3e, 0x3c, 0x1d, 0xec, 0x68,
    0x79, 0x8f, 0x07, 0xcd, 0x01, 0xd4, 0xdc, 0xc4, 0xcf, 0xee, 0x90, 0x6a,
    0x1e, 0xa0, 0xb3, 0x3a, 0x9e, 0xa1, 0x11, 0x60, 0xa6, 0xf6, 0x3b, 0xf1,
    0x53, 0x13, 0x88, 0x76, 0xa8, 0xc1, 0xb2, 0x3f, 0xba, 0x39, 0xbb, 0xd2,
    0x8a, 0x9f, 0xfa, 0xef, 0xa9, 0x6e, 0x04, 0xad, 0xe7, 0xdb, 0x50, 0xf6,
    0x5f, 0x73, 0xe2, 0x05, 0x8e, 0xd9, 0x74, 0x7d, 0xd5, 0x73, 0xc5, 0xe4,
    0xd5, 0xfa, 0x75, 0xea, 0x66, 0x0a, 0x2b, 0x17, 0x79, 0x8c, 0x30, 0x84,
    0x85, 0x6e, 0xad, 0x4e, 0x2e, 0xe1, 0x6f, 0x2f, 0x7a, 0x07, 0x7e, 0xfb,
    0xf9, 0xe6, 0x10, 0xdf, 0x6d, 0x39, 0xed, 0x31, 0x97, 0x08, 0xbb, 0x83,
    0xb2, 0x72, 0xc2, 0x97, 0x2c, 0x5a, 0x40, 0x80, 0xad, 0x2c, 0x33, 0x6d,
    0xbe, 0x0d, 0xac, 0xf0, 0xbd, 0xff, 0x2b, 0x9c, 0xb9, 0xec, 0xee, 0x51,
    0x19, 0x51, 0x91, 0xa4, 0x2d, 0xbc, 0x74, 0xbb, 0x61, 0x5e, 0x93, 0x56,
    0x8e, 0x40, 0x1b, 0x4b, 0x85, 0xaf, 0x12, 0x80, 0x7f, 0x7a, 0x22, 0x59,
    0x93, 0x2d, 0x0c, 0xce, 0xa5, 0x98, 0x11, 0x46, 0x53, 0x4e, 0x2d, 0x79,
    0x3d, 0x4d, 0x9f, 0x41, 0xa2, 0x81, 0xbe, 0xfc, 0x25, 0x00, 0x50, 0x9f,
    0x32, 0xf9, 0xe8, 0x27, 0x0a, 0x91, 0x85, 0xd7, 0x48, 0xd8, 0xd8, 0xd7,
    0x7b, 0xbc, 0x00, 0x3b, 0x12, 0x7f, 0xb4, 0x36, 0xd1, 0x9c, 0x57, 0x39,
    0xfa, 0x85, 0x92, 0x85, 0x16, 0xff, 0x58, 0x10, 0xe4, 0xb7, 0x1a, 0xa1,
    0xb9, 0x3d, 0x94, 0x59, 0x2b, 0xb8, 0x20, 0x26, 0x3c, 0xfd, 0xa6, 0x8e,
    0x60, 0xa0, 0x9e, 0xb9, 0xb3, 0x77, 0x1b, 0x7d, 0xbc, 0xc4, 0x71, 0xf3,
    0x2e, 0x3f, 0xeb, 0xe8, 0x3c, 0xcf, 0x3d, 0x19, 0xed, 0xb6, 0x0f, 0x36,
    0x46, 0xae, 0x39, 0x99, 0x4b, 0xff, 0xfc, 0x14, 0x3a, 0x58, 0xf5, 0x82,
    0x6f, 0x4f, 0x64, 0x9e, 0x62, 0x20, 0x13, 0x64, 0x4e, 0x58, 0xf3, 0x92,
    0xf1, 0xed, 0x8f, 0x28, 0xfd, 0x77, 0x04, 0x8a, 0x34, 0xbb, 0xe6, 0x59,
    0x95, 0xeb, 0x9f, 0xb1, 0xfe, 0x07, 0x64, 0x11, 0x05, 0xbe, 0xe8, 0xa0,
    0x82, 0x05, 0x7e, 0x30, 0x82, 0x05, 0x7a, 0x30, 0x82, 0x05, 0x76, 0x30,
    0x82, 0x03, 0x5e, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x02, 0x77, 0x79,
    0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01,
    0x0b, 0x05, 0x00, 0x30, 0x28, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55,
    0x04, 0x06, 0x13, 0x02, 0x55, 0x53, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03,
    0x55, 0x04, 0x08, 0x0c, 0x02, 0x57, 0x41, 0x31, 0x0c, 0x30, 0x0a, 0x06,
    0x03, 0x55, 0x04, 0x0a, 0x0c, 0x03, 0x73, 0x32, 0x6e, 0x30, 0x20, 0x17,
    0x0d, 0x31, 0x37, 0x30, 0x39, 0x30, 0x35, 0x30, 0x35, 0x34, 0x33, 0x32,
    0x32, 0x5a, 0x18, 0x0f, 0x32, 0x31, 0x31, 0x37, 0x30, 0x38, 0x31, 0x32,
    0x30, 0x35, 0x34, 0x33, 0x32, 0x32, 0x5a, 0x30, 0x5b, 0x31, 0x0b, 0x30,
    0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x55, 0x53, 0x31, 0x0b,
    0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x08, 0x0c, 0x02, 0x57, 0x41, 0x31,
    0x0c, 0x30, 0x0a, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x0c, 0x03, 0x73, 0x32,
    0x6e, 0x31, 0x16, 0x30, 0x14, 0x06, 0x03, 0x55, 0x04, 0x0b, 0x0c, 0x0d,
    0x73, 0x32, 0x6e, 0x20, 0x54, 0x65, 0x73, 0x74, 0x20, 0x4f, 0x43, 0x53,
    0x50, 0x31, 0x19, 0x30, 0x17, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x10,
    0x6f, 0x63, 0x73, 0x70, 0x2e, 0x73, 0x32, 0x6e, 0x74, 0x65, 0x73, 0x74,
    0x2e, 0x63, 0x6f, 0x6d, 0x30, 0x82, 0x02, 0x22, 0x30, 0x0d, 0x06, 0x09,
    0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03,
    0x82, 0x02, 0x0f, 0x00, 0x30, 0x82, 0x02, 0x0a, 0x02, 0x82, 0x02, 0x01,
    0x00, 0xaf, 0x41, 0x47, 0xed, 0x6a, 0x7e, 0xb1, 0x31, 0x0d, 0xe6, 0x4c,
    0xd8, 0x44, 0x75, 0xc5, 0x2e, 0x4f, 0xaa, 0xaf, 0x84, 0x4e, 0xc5, 0xe0,
    0xf3, 0x74, 0xd0, 0x6f, 0x02, 0x87, 0xca, 0x51, 0x68, 0x18, 0x83, 0xdd,
    0x4b, 0x7c, 0x8b, 0x31, 0xe8, 0x2d, 0x39, 0x09, 0x88, 0x0d, 0xa5, 0xbc,
    0x79, 0x67, 0x77, 0x08, 0x0f, 0x8b, 0xc8, 0xa5, 0x8b, 0x6a, 0x7b, 0x68,
    0xda, 0x05, 0x53, 0xbc, 0x35, 0x8f, 0xbb, 0x7f, 0x01, 0x26, 0xb9, 0x98,
    0xe6, 0x7b, 0x5c, 0x2a, 0xe3, 0x1b, 0x53, 0x93, 0xb3, 0xfd, 0x2a, 0x2e,
    0x38, 0xbc, 0x8f, 0xfc, 0xb1, 0x09, 0x93, 0x95, 0xec, 0xf2, 0x96, 0xbc,
    0x44, 0x3c, 0x43, 0x45, 0xa5, 0xf5, 0xd5, 0x6c, 0x4b, 0xa9, 0xb2, 0x0c,
    0xb6, 0xb8, 0x72, 0x56, 0x95, 0xad, 0xbc, 0x67, 0x39, 0x26, 0x86, 0x61,
    0x13, 0x02, 0xf3, 0xcb, 0xe1, 0xca, 0x3b, 0x80, 0x24, 0xc9, 0x40, 0xbb,
    0xbb, 0xb5, 0xd9, 0x75, 0x37, 0x2f, 0x68, 0x6a, 0x4a, 0x31, 0x02, 0xb8,
    0xa7, 0x1a, 0xb5, 0x65, 0x2c, 0x71, 0x11, 0x46, 0xc5, 0x5a, 0xb5, 0x6f,
    0x3d, 0x68, 0x20, 0xe5, 0xf2, 0x21, 0x5b, 0xf5, 0x5d, 0x64, 0xf0, 0x36,
    0x9c, 0x8f, 0x8c, 0x1f, 0xde, 0x02, 0x1a, 0x30, 0xe2, 0x25, 0xee, 0x17,
    0xc1, 0xfe, 0x5d, 0xd4, 0x96, 0xf5, 0x33, 0xf9, 0x22, 0xff, 0xfb, 0x4a,
    0xe9, 0xeb, 0x5b, 0x72, 0xb9, 0x9d, 0x65, 0xfd, 0x99, 0xaa, 0x3a, 0xd5,
    0x02, 0x65, 0xa5, 0x28, 0x5f, 0xc3, 0x8e, 0x91, 0x13, 0xbc, 0xd4, 0xa5,
    0xce, 0x2c, 0x1c, 0xb9, 0xee, 0x96, 0x7f, 0xf5, 0xa4, 0xd4, 0xdd, 0xe0,
    0x20, 0xd9, 0x24, 0x07, 0x54, 0xdf, 0x81, 0xe5, 0x2b, 0xfa, 0x45, 0xeb,
    0x3c, 0x80, 0x07, 0x5d, 0x0f, 0xfc, 0xd6, 0xec, 0x4d, 0x18, 0x51, 0x68,
    0x4f, 0x68, 0x98, 0x2f, 0x45, 0x41, 0x93, 0x47, 0x4f, 0xdb, 0xfa, 0x39,
    0xec, 0x8a, 0x41, 0xb7, 0x0e, 0xcc, 0x6b, 0xe9, 0x64, 0xc2, 0x65, 0x60,
    0x6b, 0x69, 0xb9, 0x96, 0x40, 0xee, 0xd2, 0xb4, 0x27, 0x87, 0x5b, 0x72,
    0xb7, 0xf0, 0x0f, 0x7b, 0x03, 0xb3, 0x51, 0xbe, 0xb5, 0xae, 0x9b, 0xfd,
    0xe0, 0xdc, 0x08, 0xf1, 0x44, 0xa0, 0xaa, 0x7a, 0xd7, 0xe8, 0x66, 0xb3,
    0x2a, 0x3b, 0x16, 0xc8, 0x51, 0xda, 0x2c, 0xcd, 0x27, 0x8b, 0xf9, 0x5e,
    0x88, 0x46, 0xce, 0x66, 0xd2, 0x2d, 0xd7, 0x2b, 0x44, 0x13, 0xcd, 0xd2,
    0xa7, 0xe9, 0x99, 0x3c, 0x42, 0x46, 0xfd, 0x15, 0x00, 0x7d, 0x05, 0x04,
    0x77, 0x2a, 0x89, 0xb5, 0xe3, 0x83, 0x26, 0x1e, 0xc7, 0x91, 0x73, 0xa7,
    0x02, 0x6c, 0x62, 0x59, 0x05, 0x5c, 0x1f, 0xde, 0x47, 0x2a, 0x4c, 0xb5,
    0x60, 0x86, 0xf2, 0x4d, 0x10, 0xfa, 0x9d, 0x58, 0x06, 0x8e, 0x68, 0x94,
    0x0a, 0x57, 0xb9, 0x6a, 0x51, 0x0f, 0x9a, 0x4b, 0xb2, 0x4d, 0xf1, 0x23,
    0x23, 0xd2, 0x09, 0xaa, 0x5a, 0xa4, 0xe8, 0x97, 0xd4, 0x31, 0xa3, 0xc6,
    0x97, 0x90, 0xe2, 0x8c, 0x32, 0x0f, 0x26, 0x5f, 0xbb, 0xb4, 0x19, 0x23,
    0xd4, 0xb7, 0xa9, 0x77, 0xb5, 0xca, 0xca, 0xbe, 0xdf, 0x47, 0xc5, 0x11,
    0x1c, 0x8e, 0xf8, 0xdc, 0x5a, 0x47, 0xe8, 0x1a, 0x36, 0xfe, 0xd8, 0x1b,
    0xdd, 0x2e, 0x9e, 0x21, 0x8a, 0x61, 0xfd, 0xa7, 0x1d, 0xea, 0xcb, 0xe5,
    0x98, 0xb7, 0xf0, 0xa2, 0x69, 0xe8, 0xfc, 0xf1, 0xa3, 0x74, 0xed, 0x9b,
    0x09, 0x2e, 0x1b, 0x2f, 0x71, 0x9d, 0xde, 0x1a, 0x59, 0x0a, 0x92, 0x12,
    0x07, 0xf9, 0xc1, 0x3a, 0x53, 0x53, 0xf2, 0x94, 0x5d, 0x7e, 0x5d, 0x56,
    0x89, 0x71, 0x96, 0xdb, 0x1b, 0x23, 0x4c, 0xea, 0xe6, 0x6a, 0x9e, 0xc5,
    0xcf, 0x00, 0x99, 0x6e, 0x54, 0x73, 0x27, 0xa3, 0x0b, 0x02, 0x03, 0x01,
    0x00, 0x01, 0xa3, 0x75, 0x30, 0x73, 0x30, 0x09, 0x06, 0x03, 0x55, 0x1d,
    0x13, 0x04, 0x02, 0x30, 0x00, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e,
    0x04, 0x16, 0x04, 0x14, 0x24, 0x27, 0xf4, 0x6c, 0x82, 0x56, 0x02, 0x65,
    0xea, 0xfa, 0x70, 0x9c, 0x75, 0xb9, 0x1b, 0x6f, 0x45, 0xeb, 0x76, 0x38,
    0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80,
    0x14, 0x12, 0xdf, 0x81, 0x75, 0x71, 0xca, 0x92, 0xd3, 0xce, 0x1b, 0x2c,
    0x2b, 0x77, 0x3b, 0x9e, 0x33, 0x77, 0xf3, 0xf7, 0x6f, 0x30, 0x0e, 0x06,
    0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x07,
    0x80, 0x30, 0x16, 0x06, 0x03, 0x55, 0x1d, 0x25, 0x01, 0x01, 0xff, 0x04,
    0x0c, 0x30, 0x0a, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03,
    0x09, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01,
    0x01, 0x0b, 0x05, 0x00, 0x03, 0x82, 0x02, 0x01, 0x00, 0x8f, 0xbb, 0xc9,
    0x53, 0x27, 0x88, 0x07, 0x3f, 0x27, 0xd5, 0x04, 0x2b, 0xb6, 0xe5, 0x86,
    0x35, 0x4d, 0x01, 0xbc, 0xfe, 0xdc, 0x05, 0x69, 0x9d, 0xa0, 0xa6, 0x44,
    0x80, 0x60, 0xf5, 0xc4, 0x09, 0xae, 0xb2, 0xc8, 0xbb, 0x09, 0xc2, 0xeb,
    0x0c, 0xe2, 0x16, 0xfb, 0xe4, 0xa4, 0x63, 0x87, 0x97, 0x73, 0x92, 0xc2,
    0xaa, 0x7d, 0xec, 0x4b, 0xe8, 0x93, 0xe5, 0x9e, 0x4a, 0x8a, 0x7c, 0x28,
    0xd9, 0x4e, 0xcc, 0x07, 0x63, 0xda, 0x4d, 0xef, 0x75, 0xa8, 0x1e, 0x36,
    0x55, 0x3b, 0xd9, 0xbd, 0x08, 0x3c, 0x5c, 0x59, 0xcd, 0xc6, 0xe4, 0xb0,
    0x25, 0x3f, 0x67, 0x62, 0xc0, 0x3e, 0x03, 0x1f, 0x15, 0x73, 0x07, 0x30,
    0x9f, 0x26, 0xa5, 0x3a, 0xcf, 0xb4, 0xb3, 0x43, 0xbb, 0xaf, 0x0e, 0x65,
    0x7d, 0x03, 0x76, 0x27, 0x9e, 0x47, 0xe5, 0x81, 0x53, 0xd8, 0x78, 0x49,
    0xcd, 0x64, 0xfe, 0xfa, 0x6f, 0x81, 0x96, 0xd4, 0x79, 0xfc, 0x35, 0x74,
    0x58, 0xd8, 0x7b, 0x1e, 0xcb, 0xf6, 0xeb, 0x47, 0xda, 0xdb, 0x26, 0xa6,
    0x99, 0x58, 0x3d, 0xcc, 0xa3, 0x37, 0x41, 0xd8, 0xe4, 0xb8, 0x88, 0x4a,
    0x55, 0xb5, 0x8e, 0xfc, 0x95, 0xed, 0x78, 0xca, 0xcd, 0x29, 0x87, 0x0d,
    0xdb, 0x09, 0x2f, 0x57, 0x7e, 0x41, 0x94, 0x85, 0x8d, 0x13, 0xd7, 0xa2,
    0x7b, 0xf8, 0xaa, 0x4f, 0x4f, 0xe4, 0x0a, 0x52, 0x04, 0xc5, 0xeb, 0x65,
    0x63, 0x04, 0x43, 0xee, 0xe2, 0x9a, 0x6a, 0xf8, 0xaa, 0xb0, 0xc4, 0xc4,
    0xd3, 0xf6, 0x4b, 0xbd, 0x70, 0xca, 0x57, 0x89, 0xbd, 0x98, 0x8b, 0x9a,
    0xb4, 0xb5, 0xdb, 0x94, 0x6d, 0x52, 0xa0, 0x2a, 0x03, 0x19, 0x61, 0xee,
    0xb8, 0x03, 0xe7, 0x79, 0x9d, 0xb7, 0x52, 0xb7, 0x87, 0xc0, 0xc6, 0xc7,
    0xec, 0xf8, 0x91, 0xc6, 0xc1, 0x87, 0xf7, 0x6e, 0xb8, 0x13, 0xd5, 0x74,
    0x3f, 0x48, 0xb1, 0xcd, 0x19, 0x75, 0xcb, 0xb1, 0x34, 0x4a, 0x23, 0x07,
    0xb3, 0x3e, 0xd1, 0x13, 0x74, 0x14, 0x7a, 0xf3, 0x80, 0x15, 0x9e, 0x87,
    0x2d, 0x41, 0xef, 0x77, 0x0e, 0x58, 0x0c, 0xcf, 0xf8, 0xe3, 0x59, 0xce,
    0xc3, 0xb6, 0xe4, 0x7b, 0x24, 0x47, 0x9a, 0x1a, 0xb6, 0x8c, 0xd4, 0xa9,
    0x7f, 0x5c, 0x35, 0x74, 0x78, 0xf0, 0xa5, 0x70, 0xdc, 0x17, 0xe7, 0x4a,
    0xec, 0x92, 0x54, 0x92, 0x64, 0xd8, 0xbd, 0xf8, 0x32, 0x2a, 0x07, 0x32,
    0x90, 0x44, 0xd1, 0xdc, 0x91, 0x1f, 0x79, 0x68, 0xea, 0x88, 0x92, 0xc7,
    0xb0, 0xc6, 0x1c, 0xed, 0x29, 0xc7, 0x68, 0x7f, 0x06, 0x43, 0x33, 0x25,
    0x05, 0xd1, 0xe5, 0x2a, 0xb4, 0xd9, 0xfe, 0xc3, 0x01, 0x8d, 0x6a, 0x4e,
    0x27, 0x49, 0xc4, 0x93, 0xe9, 0x0f, 0x5a, 0xc0, 0x20, 0x55, 0xe8, 0xa2,
    0xbc, 0x42, 0x53, 0x5d, 0x45, 0x33, 0xb3, 0x08, 0xc6, 0xc6, 0x17, 0x2d,
    0x5c, 0x19, 0x09, 0x13, 0xfd, 0x1f, 0x24, 0xe9, 0x3d, 0x48, 0xff, 0x50,
    0x81, 0x50, 0xcc, 0x80, 0x42, 0xf3, 0x77, 0xb0, 0xff, 0xa9, 0xe7, 0x60,
    0x70, 0x97, 0x5d, 0xb8, 0xcb, 0x78, 0x15, 0x50, 0x3b, 0x8b, 0x0a, 0x9a,
    0x9a, 0xb0, 0xbe, 0x61, 0x5f, 0x0e, 0xfa, 0x1e, 0xd9, 0x10, 0x26, 0xb8,
    0x03, 0xff, 0x50, 0x2b, 0x6c, 0x06, 0x56, 0xaf, 0x5e, 0xa4, 0x74, 0x51,
    0xac, 0x7a, 0x6f, 0x81, 0x63, 0xf2, 0xd2, 0x74, 0xdd, 0x1f, 0x9d, 0x17,
    0xc8, 0x90, 0x9e, 0xa4, 0x79, 0xc5, 0x5f, 0xd7, 0x12, 0xb2, 0x39, 0x9c,
    0x06, 0x35, 0x45, 0x9a, 0xae, 0xa4, 0x14, 0x17, 0x67, 0xd7, 0x9f, 0xa2,
    0x41, 0x86, 0x4d, 0xd4, 0x31, 0xd5, 0x1a, 0xbe, 0x8e, 0x5c, 0xa9, 0x0d,
    0xdc, 0x8a, 0x0a, 0xa9, 0x65, 0x4a, 0xd5, 0x38, 0x22, 0xc8, 0x14, 0x5b,
    0xb9, 0x5f, 0x50, 0x8b, 0x94 };

static bssl::UniquePtr<OCSP_RESPONSE> LoadOCSP_RESPONSE(
    bssl::Span<const uint8_t> der) {
  const uint8_t *ptr = der.data();
  return bssl::UniquePtr<OCSP_RESPONSE>(d2i_OCSP_RESPONSE(nullptr, &ptr, der.size()));
}

static bssl::UniquePtr<STACK_OF(X509)> CertsToStack(
    const std::vector<X509 *> &certs) {
  bssl::UniquePtr<STACK_OF(X509)> stack(sk_X509_new_null());
  if (!stack) {
    return nullptr;
  }
  for (auto cert : certs) {
    if (!bssl::PushToStack(stack.get(), bssl::UpRef(cert))) {
      return nullptr;
    }
  }
  return stack;
}

static bool PEMToDER(bssl::UniquePtr<uint8_t> *out, size_t *out_len,
                     const char *pem) {
  bssl::UniquePtr<BIO> bio(BIO_new_mem_buf(pem, strlen(pem)));
  if (!bio) {
    return false;
  }

  char *name, *header;
  uint8_t *data;
  long data_len;
  if (!PEM_read_bio(bio.get(), &name, &header, &data, &data_len)) {
    fprintf(stderr, "failed to read PEM data.\n");
    return false;
  }
  OPENSSL_free(name);
  OPENSSL_free(header);

  out->reset(data);
  *out_len = data_len;
  return true;
}

static bssl::UniquePtr<X509> LoadX509fromPEM(const char *pem) {
  size_t data_len;
  bssl::UniquePtr<uint8_t> data;
  if(!PEMToDER(&data, &data_len, pem)){
    return nullptr;
  }

  bssl::UniquePtr<CRYPTO_BUFFER> buf(
      CRYPTO_BUFFER_new(data.get(), data_len, nullptr));
  if(!buf){
    return nullptr;
  }

  return bssl::UniquePtr<X509>(X509_parse_from_buffer(buf.get()));
}

TEST(OCSPTest, TestBasic) {
  bssl::UniquePtr<OCSP_RESPONSE> ocsp_response;
  bssl::UniquePtr<OCSP_BASICRESP> basic_response;

  ocsp_response = LoadOCSP_RESPONSE(ocsp_response_der);
  ASSERT_TRUE(ocsp_response);

  int ocsp_status = OCSP_response_status(ocsp_response.get());
  ASSERT_EQ(OCSP_RESPONSE_STATUS_SUCCESSFUL, ocsp_status);

  basic_response = bssl::UniquePtr<OCSP_BASICRESP>(OCSP_response_get1_basic(ocsp_response.get()));
  ASSERT_TRUE(basic_response);
}

TEST(OCSPTest, TestGoodOCSP) {
  bssl::UniquePtr<OCSP_RESPONSE> ocsp_response;
  bssl::UniquePtr<OCSP_BASICRESP> basic_response;

  ocsp_response = LoadOCSP_RESPONSE(ocsp_response_der);
  ASSERT_TRUE(ocsp_response);

  int ocsp_status = OCSP_response_status(ocsp_response.get());
  ASSERT_EQ(OCSP_RESPONSE_STATUS_SUCCESSFUL, ocsp_status);

  basic_response = bssl::UniquePtr<OCSP_BASICRESP>(OCSP_response_get1_basic(ocsp_response.get()));
  ASSERT_TRUE(basic_response);

  /* set up trust store and certificate chain */
  bssl::UniquePtr<X509_STORE> trust_store(X509_STORE_new());
  X509_STORE_add_cert(trust_store.get(),LoadX509fromPEM(ca_cert).get());
  bssl::UniquePtr<STACK_OF(X509)> server_cert_chain = CertsToStack(
      {LoadX509fromPEM(server_cert).get(),LoadX509fromPEM(ca_cert).get()});;

  X509 *subject = sk_X509_value(server_cert_chain.get(), 0);
  X509 *issuer = nullptr;
  /* find the issuer in the chain. If it's not there. Fail everything. */
  for (size_t i = 0; i < sk_X509_num(server_cert_chain.get()); i++) {
    X509 *issuer_candidate = sk_X509_value(server_cert_chain.get(), i);
    ASSERT_TRUE(issuer_candidate);
    const int issuer_value = X509_check_issued(issuer_candidate, subject);

    if (issuer_value == X509_V_OK) {
      issuer = issuer_candidate;
      break;
    }
  }
  ASSERT_TRUE(issuer);

  /* Expect basic verify here, but we skip the step for now because functionality has not been implemented yet */

  int status = 0;
  int reason = 0;
  bssl::UniquePtr<OCSP_CERTID> cert_id = bssl::UniquePtr<OCSP_CERTID>(OCSP_cert_to_id(EVP_sha1(), subject, issuer));
  ASSERT_TRUE(cert_id);

  ASN1_GENERALIZEDTIME *revtime, *thisupd, *nextupd;
  /* Actual verification of the response */
  const int ocsp_resp_find_status_res = OCSP_resp_find_status(basic_response.get(), cert_id.get(), &status, &reason, &revtime, &thisupd, &nextupd);
  ASSERT_EQ(1, ocsp_resp_find_status_res);
  ASSERT_EQ(V_OCSP_CERTSTATUS_GOOD, status);
}

TEST(OCSPTest, TestRevokedOCSP) {
  bssl::UniquePtr<OCSP_RESPONSE> ocsp_response;
  bssl::UniquePtr<OCSP_BASICRESP> basic_response;

  ocsp_response = LoadOCSP_RESPONSE(ocsp_revoked_response_der);
  ASSERT_TRUE(ocsp_response);

  int ocsp_status = OCSP_response_status(ocsp_response.get());
  ASSERT_EQ(OCSP_RESPONSE_STATUS_SUCCESSFUL, ocsp_status);

  basic_response = bssl::UniquePtr<OCSP_BASICRESP>(OCSP_response_get1_basic(ocsp_response.get()));
  ASSERT_TRUE(basic_response);

  /* set up trust store and certificate chain */
  bssl::UniquePtr<X509_STORE> trust_store(X509_STORE_new());
  X509_STORE_add_cert(trust_store.get(),LoadX509fromPEM(ca_cert).get());
  bssl::UniquePtr<STACK_OF(X509)> server_cert_chain = CertsToStack(
      {LoadX509fromPEM(server_cert).get(),LoadX509fromPEM(ca_cert).get()});;

  X509 *subject = sk_X509_value(server_cert_chain.get(), 0);
  X509 *issuer = nullptr;
  /* find the issuer in the chain. If it's not there. Fail everything. */
  for (size_t i = 0; i < sk_X509_num(server_cert_chain.get()); i++) {
    X509 *issuer_candidate = sk_X509_value(server_cert_chain.get(), i);
    ASSERT_TRUE(issuer_candidate);
    const int issuer_value = X509_check_issued(issuer_candidate, subject);

    if (issuer_value == X509_V_OK) {
      issuer = issuer_candidate;
      break;
    }
  }
  ASSERT_TRUE(issuer);

  /* Expect basic verify here, but we skip the step for now because functionality has not been implemented yet */

  int status = 0;
  int reason = 0;
  bssl::UniquePtr<OCSP_CERTID> cert_id = bssl::UniquePtr<OCSP_CERTID>(OCSP_cert_to_id(EVP_sha1(), subject, issuer));
  ASSERT_TRUE(cert_id);

  ASN1_GENERALIZEDTIME *revtime, *thisupd, *nextupd;
  /* Actual verification of the response */
  const int ocsp_resp_find_status_res = OCSP_resp_find_status(basic_response.get(), cert_id.get(), &status, &reason, &revtime, &thisupd, &nextupd);
  ASSERT_EQ(1, ocsp_resp_find_status_res);
  ASSERT_EQ(V_OCSP_CERTSTATUS_REVOKED, status);
}
